import openai
from config import API_TOKEN
import json
from base64 import b64decode
from aiogram import types, Dispatcher, executor, Bot
from config import TOKEN_BOT

bot = Bot(TOKEN_BOT)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start(message : types.Message):
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç üëã {message.from_user.first_name} —è –Ω–µ–π—Ä–æ—Å–µ—Ç—å  üõ∞ –∫–æ—Ç–æ—Ä–∞—è —É–º–µ–µ—Ç –ø–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å '
                                                 f'–∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ ‚úçÔ∏è, –Ω–æ —è –±—É–¥—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è  üòú '
                                                 f'–Ω–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –ª—é–±–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É –≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ –∑–∞–∫–∞—Ç–∞ ')

@dp.message_handler()
async def sta(message : types.Message):

    piompt = message.text
    openai.api_key = API_TOKEN

    response = openai.Image.create(
        prompt= piompt,
        n=1,
        size = '256x256',
        response_format='b64_json'
    )

    with open('promt.json', 'w') as file:
        json.dump(response, file, indent=4, ensure_ascii=False)

    image_data = b64decode(response['data'][0]['b64_json'])
    file_name = '_'.join(piompt.split(' '))



    with open(f'{file_name}.png', 'wb') as file:
        file.write(image_data)

    await bot.send_photo(message.from_user.id, image_data)

def generite_response(text):
    openai.api_key = API_TOKEN
    response = openai.Completion.create(
        promt=text,
        engine='text-davinci-003',
        max_tokens=100,
        temperature=0.7,
        n=1,
        stop=None,
        timeout=15
    )
    if response and response.choises:
        return response.choises[0].text.strip()
    else:
        return None

res = generite_response('–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?')

print(res)

executor.start_polling(dp, skip_updates=None)